
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author DELL
 */
public class FIRST extends javax.swing.JFrame {
private HashMap<String, HashMap<String, Integer>> rentMap;
  private Connection con;
    private PreparedStatement pst;
    private ResultSet rs;
    /**
     * Creates new form FIRST
     */
    public FIRST() {
        initComponents();
         fetchDataFromDatabase();
         //fetchDataFromDatabase();
           try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fahim", "root", "12345678");
            pst = con.prepareStatement("select * from project2 ");
            rs = pst.executeQuery();
            
              /* if (rs.next()) {
               NAME.setText(rs.getString(1));
               MOBILE.setText(rs.getString(2)); 
               ADDRESS.setText(rs.getString(3));
               NID_NUMBER.setText(rs.getString(4));
                 
               
            }*/
        } catch (Exception ex) {
            System.out.println(ex);
        }

         initializeRentMap();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel15 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        NAME = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        MOBILE = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        okk = new javax.swing.JTextArea();
        ADDRESS = new javax.swing.JTextField();
        button = new javax.swing.JButton();
        NID_NUMBER = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ok = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        submitt = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jComboBox5 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        NEXT = new javax.swing.JButton();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        LOGOUT = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        INFORMATION = new javax.swing.JButton();
        search1 = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        car_name = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        available = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N

        jLabel19.setText("jLabel19");

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N

        jLabel22.setText("jLabel22");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dhaka", "Gazipur", "Tangail", "Kishoreganj", "Manikganj", "Munshiganj", "Narayanganj", "Narsingdi", "Faridpur", "Gopalganj", "Madaripur", "Rajbari", "Shariatpur" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 175, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("ADDRESS");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 574, 72, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("DESTINATION");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 210, -1, 28));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("NID NUMBER");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 620, -1, -1));

        jComboBox4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dhaka", "Gazipur", "Tangail", "Kishoreganj", "Manikganj", "Munshiganj", "Narayanganj", "Narsingdi", "Faridpur", "Gopalganj", "Madaripur", "Rajbari", "Shariatpur" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, 175, -1));

        NAME.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        NAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NAMEActionPerformed(evt);
            }
        });
        getContentPane().add(NAME, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 495, 197, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("RENT AMOUNT");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 390, -1, 28));

        MOBILE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MOBILE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOBILEActionPerformed(evt);
            }
        });
        getContentPane().add(MOBILE, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 535, 197, -1));

        okk.setColumns(20);
        okk.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        okk.setRows(5);
        jScrollPane2.setViewportView(okk);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 390, 179, 39));

        ADDRESS.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        ADDRESS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESSActionPerformed(evt);
            }
        });
        getContentPane().add(ADDRESS, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 571, 197, -1));

        button.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        button.setText("BUTTON");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });
        getContentPane().add(button, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 350, -1, -1));

        NID_NUMBER.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        NID_NUMBER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NID_NUMBERActionPerformed(evt);
            }
        });
        getContentPane().add(NID_NUMBER, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 614, 197, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("QuickTrip Car Rentals");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 525, 106));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("CUSTOMER INFORMATION");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 439, -1, 44));

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SEDAN", "MINI VAN", "SUV", "HATCHBACK", "TRUCK" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 193, 28));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Vehical Type");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 91, 28));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Available Vehical");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, 20));

        jComboBox2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TOYOTA CAMRY", "TOYOTA SIENNA", "HONDA CR-V", "VOLKSWAGEN GOLF", "FORD F-150", "HONDA CIVIC", "HONDA ODYSSEY", "MAZDA CX-5", "MINI COOPER", "RAM 1500", "TOYOTA COROLLA", "AUDI A3", "TOYOTA PRIUS", "TOYOTA DYNA", "NISSAN NAVARA", "SUZUKI RAVI", "TOYOTA PRADO", "AUDI Q2", "HYUNDAI CRE", "MG MG3", "RENAULT KWID", "EICHER 2017", "LAGUNA 2019" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 193, 28));

        ok.setColumns(20);
        ok.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ok.setRows(5);
        jScrollPane1.setViewportView(ok);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 305, 150));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("TOUR INFORMATION");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 130, -1, 43));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("NAME");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 497, 72, 19));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("STARTING");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, -1, 28));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("MOBILE");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 538, 72, -1));

        submitt.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submitt.setText("SUBMITT");
        submitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submittActionPerformed(evt);
            }
        });
        getContentPane().add(submitt, new org.netbeans.lib.awtextra.AbsoluteConstraints(764, 591, -1, -1));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 183, 43));

        jComboBox5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 350, 175, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("DAYS");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 75, 43));

        NEXT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        NEXT.setText("NEXT");
        NEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NEXTActionPerformed(evt);
            }
        });
        getContentPane().add(NEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 650, -1, -1));
        getContentPane().add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 250, 170, -1));
        getContentPane().add(jDateChooser3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 170, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("STARTING DATE");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 250, 110, 20));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("GIVING DATE");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 280, 110, 20));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("STARTING TIME");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 110, 20));

        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 60, -1));

        LOGOUT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LOGOUT.setText("LOGOUT");
        LOGOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOGOUTActionPerformed(evt);
            }
        });
        getContentPane().add(LOGOUT, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 650, -1, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("GIVING TIME");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, -1, -1));

        jTextField2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 310, 60, -1));

        INFORMATION.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        INFORMATION.setText("INFORMATION");
        INFORMATION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INFORMATIONActionPerformed(evt);
            }
        });
        getContentPane().add(INFORMATION, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 650, -1, -1));

        search1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });
        getContentPane().add(search1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 180, -1));

        search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, -1, 20));

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "car_name", "available"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 350, 100));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("CAR_NAME");
        getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 650, -1, -1));

        car_name.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        car_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                car_nameActionPerformed(evt);
            }
        });
        getContentPane().add(car_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 650, 200, -1));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("AVAILABLE");
        getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 690, -1, -1));

        available.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        available.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableActionPerformed(evt);
            }
        });
        getContentPane().add(available, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 680, 200, 30));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N
        getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(-590, 0, 1440, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void NAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NAMEActionPerformed

    private void MOBILEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOBILEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MOBILEActionPerformed

    private void ADDRESSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ADDRESSActionPerformed

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        // TODO add your handling code here:updateRentAmount();
        updateRentAmount();
    }//GEN-LAST:event_buttonActionPerformed

    private void NID_NUMBERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NID_NUMBERActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NID_NUMBERActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
 String selectedVehicleType = (String) jComboBox1.getSelectedItem();
    System.out.println("Selected Vehicle Type: " + selectedVehicleType);

    // Declare an array for vehicle models and the initial details
    String[] models;
    String details = "";

    switch (selectedVehicleType) {
        case "SEDAN":
            models = new String[]{"TOYOTA CAMRY", "HONDA CIVIC" ,"TOYOTA COROLLA","AUDI A3","TOYOTA PRIUS"};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
           // details = "Select a model from the list (Toyota Camry or Honda Civic).";
            break;

        case "MINI VAN":
            models = new String[]{"TOYOTA SIENNA", "HONDA ODYSSEY","TATA.2021","EICHER 2017","LAGUNA 2019"};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
           // details = "Select a model from the list (Toyota Sienna or Honda Odyssey).";
            break;

        case "SUV":
            models = new String[]{"HONDA CR-V", "MAZDA CX-5","TOYOTA PRADO","AUDI Q2","HYUNDAI CRETA"};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
            //details = "Select a model from the list (Honda CR-V or Mazda CX-5).";
            break;

        case "HATCHBACK":
            models = new String[]{"VOLKSWAGEN GOLF", "MINI COOPER" ,"TOYOTA AQUA ",
"MG MG3",
"RENAULT KWID"};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
           // details = "Select a model from the list (Volkswagen Golf or Mini Cooper).";
            break;

        case "TRUCK":
            models = new String[]{"FORD F-150", "RAM 1500","TOYOTA DYNA", "NISSAN NAVARA", "SUZUKI RAVI"};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
           // details = "Select a model from the list (Ford F-150 or RAM 1500).";
            break;

        default:
            models = new String[]{};
            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(models));
            details = ""; // Clear details if no vehicle type is selected
            break;
    }

    // Update the JTextArea with a generic message before selecting a model
    ok.setText(details);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
          String selectedModel = (String) jComboBox2.getSelectedItem();
    System.out.println("Selected Model: " + selectedModel);

    String details = "";

    switch (selectedModel) {
    case "TOYOTA CAMRY":
        details = "Model: Toyota Camry\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 2,500 cc or 3,500 cc (varies by trim)\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Toyota Camry
        break;

    case "HONDA CIVIC":
        details = "Model: Honda Civic\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,800 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Honda Civic
        break;

    case "TOYOTA SIENNA":
        details = "Model: Toyota Sienna\n" +
                  "Seating Capacity: 7-8 passengers\n" +
                  "Air Conditioning: Tri-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 3,500 cc (3.5L V6 engine)\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Toyota Sienna
        break;

    case "HONDA ODYSSEY":
        details = "Model: Honda Odyssey\n" +
                  "Seating Capacity: 7-8 passengers\n" +
                  "Air Conditioning: Tri-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 3,500 cc (3.5L V6 engine)\n" +
                  "Hybrid: No\n";
        break;

    case "HONDA CR-V":
        details = "Model: Honda CR-V\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 2,400 cc (2.4L engine)\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Honda CR-V
        break;

    case "MAZDA CX-5":
        details = "Model: Mazda CX-5\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 2,000 cc to 2,500 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "VOLKSWAGEN GOLF":
        details = "Model: Volkswagen Golf\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,400 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "MINI COOPER":
        details = "Model: Mini Cooper\n" +
                  "Seating Capacity: 4 passengers\n" +
                  "Air Conditioning: Automatic climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,200 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "FORD F-150":
        details = "Model: Ford F-150\n" +
                  "Seating Capacity: 3-6 passengers\n" +
                  "Air Conditioning: Dual-zone or optional climate control\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 3,300 cc to 5,000 cc (varies by trim)\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Ford F-150
        break;

    case "RAM 1500":
        details = "Model: RAM 1500\n" +
                  "Seating Capacity: 3-6 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 3,600 cc to 5,700 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "TOYOTA COROLLA":
        details = "Model: Toyota Corolla\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Manual or automatic climate control (varies by trim)\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,800 cc\n" +
                  "Hybrid: Yes\n"; // Hybrid available for Toyota Corolla
        break;

    case "AUDI A3":
        details = "Model: Audi A3\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 1,800 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "TOYOTA PRIUS":
        details = "Model: Toyota Prius\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Automatic climate control\n" +
                  "Fuel Type: Hybrid (Gasoline + Electric)\n" +
                  "Engine Capacity: 1,800 cc (Hybrid engine)\n" +
                  "Hybrid: Yes\n"; // Hybrid engine for Toyota Prius
        break;

    case "TOYOTA DYNA":
        details = "Model: Toyota Dyna\n" +
                  "Seating Capacity: 2-3 passengers\n" +
                  "Air Conditioning: Optional\n" +
                  "Fuel Type: Diesel\n" +
                  "Engine Capacity: 3,000 cc to 4,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "NISSAN NAVARA":
        details = "Model: Nissan Navara\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Diesel\n" +
                  "Engine Capacity: 2,500 cc to 3,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "SUZUKI RAVI":
        details = "Model: Suzuki Ravi\n" +
                  "Seating Capacity: 2 passengers\n" +
                  "Air Conditioning: Optional\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 800 cc\n" +
                  "Hybrid: No\n";
        break;

    case "TOYOTA PRADO":
        details = "Model: Toyota Prado\n" +
                  "Seating Capacity: 5-7 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Diesel\n" +
                  "Engine Capacity: 2,800 cc to 3,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "AUDI Q2":
        details = "Model: Audi Q2\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,500 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "HYUNDAI CRETA":
        details = "Model: Hyundai CRETA\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 1,600 cc to 2,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;



    case "MG MG3":
        details = "Model: MG MG3\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Manual or automatic climate control (varies by trim)\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 1,500 cc\n" +
                  "Hybrid: No\n";
        break;

    case "RENAULT KWID":
        details = "Model: Renault Kwid\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Manual or automatic climate control (varies by trim)\n" +
                  "Fuel Type: Gasoline\n" +
                  "Engine Capacity: 800 cc to 1,000 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "TATA 2021":
        details = "Model: Tata 2021\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Manual or automatic climate control (varies by trim)\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 1,000 cc to 1,500 cc (varies by trim)\n" +
                  "Hybrid: No\n";
        break;

    case "EICHER 2017":
        details = "Model: Eicher 2017\n" +
                  "Seating Capacity: 2-3 passengers\n" +
                  "Air Conditioning: Optional\n" +
                  "Fuel Type: Diesel\n" +
                  "Engine Capacity: 2,500 cc\n" +
                  "Hybrid: No\n";
        break;

    case "LAGUNA 2019":
        details = "Model: Laguna 2019\n" +
                  "Seating Capacity: 5 passengers\n" +
                  "Air Conditioning: Dual-zone climate control\n" +
                  "Fuel Type: Gasoline/Diesel\n" +
                  "Engine Capacity: 2,000 cc\n" +
                  "Hybrid: No\n";
        break;

    default:
        details = "Model not found!";
        break;
}


    // Display the selected model details in the JTextArea
    ok.setText(details);
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void submittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submittActionPerformed

// After you insert data successfully, clear the fields:
// Your existing variables for text fields
String name = NAME.getText();
String address = ADDRESS.getText();
String mobile = MOBILE.getText();
String nid_number = NID_NUMBER.getText();
String carname = car_name.getText();
String av = available.getText();

try {
    // Step 1: Insert into the project2 table
    String sqlProject2 = "INSERT INTO project2 (NAME, MOBILE, ADDRESS, NID_NUMBER, car_name, available) VALUES (?, ?, ?, ?, ?, ?)";
    PreparedStatement insertProject2 = con.prepareStatement(sqlProject2);
    insertProject2.setString(1, name);
    insertProject2.setString(2, mobile);
    insertProject2.setString(3, address);
    insertProject2.setString(4, nid_number);
    insertProject2.setString(5, carname);
    insertProject2.setString(6, av);

    int rowsInserted = insertProject2.executeUpdate();

    if (rowsInserted > 0) {
        System.out.println("New customer entry added successfully!");

        // Step 2: Check if car_name exists in the hello table
        String checkCarName = "SELECT * FROM hello WHERE car_name = ?";
        PreparedStatement checkCarStmt = con.prepareStatement(checkCarName);
        checkCarStmt.setString(1, carname);

        ResultSet resultSet = checkCarStmt.executeQuery();

        if (resultSet.next()) {
            // Car name exists in the hello table, so update its available status
            String updateHello = "UPDATE hello SET available = ? WHERE car_name = ?";
            PreparedStatement updateHelloStmt = con.prepareStatement(updateHello);
            updateHelloStmt.setString(1, av);
            updateHelloStmt.setString(2, carname);

            int rowsUpdated = updateHelloStmt.executeUpdate();
            if (rowsUpdated > 0) {
                System.out.println("Hello table updated successfully for car: " + carname);
            } else {
                System.out.println("Failed to update the hello table.");
            }

            updateHelloStmt.close();
        } else {
            System.out.println("Car name not found in the hello table.");
        }

        // Clear text fields after successful operations
        NAME.setText("");
        MOBILE.setText("");
        ADDRESS.setText("");
        NID_NUMBER.setText("");
        car_name.setText("");
        available.setText("");

        // Optionally, refresh the table (if needed)
        refreshTable();

        // Close the PreparedStatement for checking car name
        checkCarStmt.close();
    } else {
        System.out.println("Failed to add new customer entry.");
    }

    // Close the PreparedStatement for inserting into project2
    insertProject2.close();

} catch (Exception ex) {
    System.out.println("Error adding new customer entry: " + ex);
}
    }//GEN-LAST:event_submittActionPerformed
 
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // Parse rent from okk JTextArea
    String rentText = okk.getText().replace(" BDT", "");  // Remove "BDT" if it's in the text
    try {
        int baseRent = Integer.parseInt(rentText); // Convert rent to an integer
        int multiplier = Integer.parseInt((String) jComboBox5.getSelectedItem()); // Get selected number from jComboBox5
        int totalRent = baseRent * multiplier; // Calculate the total

        // Update okk with the new total rent
        okk.setText(totalRent + " BDT");

    } catch (NumberFormatException e) {
        okk.setText("Invalid rent value");
    }
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void NEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NEXTActionPerformed
        payment paymentPage = new payment();
    
    // Set the payment page as visible
    paymentPage.setVisible(true);
    
    // Optionally, hide the current form
    this.setVisible(false);
    
    
    }//GEN-LAST:event_NEXTActionPerformed

    private void LOGOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOGOUTActionPerformed
            // Create and display the login window
    login1 loginPage = new login1();
    loginPage.setVisible(true);

    // Close the current window (FIRST page)
    this.dispose();
    }//GEN-LAST:event_LOGOUTActionPerformed

    private void INFORMATIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INFORMATIONActionPerformed
  table1 firstPage = new table1();
    firstPage.setVisible(true);
    this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_INFORMATIONActionPerformed

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed

    }//GEN-LAST:event_search1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    jTable1.setRowSorter(sorter);
    String text = search1.getText().trim();
    if (text.isEmpty()) {
        sorter.setRowFilter(null);
    } else {
        try {
            // Create a regex pattern based on the entered text
            Pattern pattern = Pattern.compile("(?i)" + Pattern.quote(text));
            // Apply the filter to the S_NUM column (index 0)
            sorter.setRowFilter(RowFilter.regexFilter(pattern.pattern(), 0));
        } catch (java.util.regex.PatternSyntaxException ex) {
            // Handle invalid regex pattern
            System.out.println("Invalid regex pattern: " + ex.getMessage());
        }
    }    
    }//GEN-LAST:event_searchActionPerformed

    private void car_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_car_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_car_nameActionPerformed

    private void availableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availableActionPerformed
  
     private void fetchDataFromDatabase() {
        // Database connection variables
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        // Define the table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish the connection to the database
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fahim", "root", "12345678");

            // Prepare the query to fetch data from the 'information' table
            String query = "SELECT * FROM hello";
            pst = con.prepareStatement(query);

            // Execute the query
            rs = pst.executeQuery();

            // Loop through the result set and populate the table
            while (rs.next()) {
                // Add a row to the table for each result
                model.addRow(new Object[]{
                    rs.getString("car_name"),
                    rs.getString("available")
                });
            }
        } catch (Exception ex) {
            // Print any exceptions to help with debugging
            System.out.println("Error: " + ex.getMessage());
        } finally {
            // Close resources
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (Exception ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }   
private void initializeRentMap() {
   rentMap = new HashMap<>(); // Initialize the class-level variable
    
    // Define base location rates for common locations
    HashMap<String, Integer> baseRates = new HashMap<>();
    baseRates.put("Dhaka", 1000);
    baseRates.put("Gazipur", 1200);
    baseRates.put("Tangail", 1500);
    baseRates.put("Kishoreganj", 1300);
    baseRates.put("Manikganj", 1400);
    baseRates.put("Munshiganj", 1500);
    baseRates.put("Narayanganj", 1600);
    baseRates.put("Narsingdi", 1700);
    baseRates.put("Faridpur", 1800);
    baseRates.put("Gopalganj", 1900);
    baseRates.put("Madaripur", 2000);
    baseRates.put("Rajbari", 2100);
    baseRates.put("Shariatpur", 2200);

    // Helper method to create vehicle type rates by scaling base rates

    rentMap.put("TOYOTA CAMRY", createVehicleRates(baseRates, 1.0)); // Base rates for Toyota Camry
    rentMap.put("HONDA CIVIC", createVehicleRates(baseRates, 1.1)); // Slightly higher rates for Honda Civic
    rentMap.put("TOYOTA COROLLA", createVehicleRates(baseRates, 1.0)); // Same as base rates for Toyota Corolla
    rentMap.put("AUDI A3", createVehicleRates(baseRates, 1.3));  // Slightly higher rates for Audi A3
    rentMap.put("TOYOTA PRIUS", createVehicleRates(baseRates, 1.2));
    
    
    
       rentMap.put("TOYOTA SIENNA", createVehicleRates(baseRates, 1.5)); // Base rates for Toyota Sienna
    rentMap.put("HONDA ODYSSEY", createVehicleRates(baseRates, 1.6)); // Slightly higher rates for Honda Odyssey
    rentMap.put("TATA 2021", createVehicleRates(baseRates, 1.4)); // Slightly lower rates for TATA 2021
    rentMap.put("EICHER 2017", createVehicleRates(baseRates, 1.3)); // Lower rates for Eicher 2017
    rentMap.put("LAGUNA 2019", createVehicleRates(baseRates, 1.5));
    
    
    
      rentMap.put("HONDA CR-V", createVehicleRates(baseRates, 1.4)); // Base rates for Honda CR-V
    rentMap.put("MAZDA CX-5", createVehicleRates(baseRates, 1.5)); // Slightly higher rates for Mazda CX-5
    rentMap.put("TOYOTA PRADO", createVehicleRates(baseRates, 1.6)); // Premium rates for Toyota Prado
    rentMap.put("AUDI Q2", createVehicleRates(baseRates, 1.7)); // Higher rates for Audi Q2 (luxury SUV)
    rentMap.put("HYUNDAI CRETA", createVehicleRates(baseRates, 1.3));
    
    
    
    
    
      rentMap.put("VOLKSWAGEN GOLF", createVehicleRates(baseRates, 0.8)); // Base rates for Volkswagen Golf
    rentMap.put("MINI COOPER", createVehicleRates(baseRates, 0.9)); // Slightly higher rates for Mini Cooper
    rentMap.put("TOYOTA AQUA", createVehicleRates(baseRates, 0.7)); // Lower rates for Toyota Aqua
    rentMap.put("MG MG3", createVehicleRates(baseRates, 0.85)); // Slightly lower rates for MG MG3
    rentMap.put("RENAULT KWID", createVehicleRates(baseRates, 0.75)); 
    
    
    
    
    
        rentMap.put("FORD F-150", createVehicleRates(baseRates, 2.2)); // Ford F-150 has a higher multiplier due to larger size
    rentMap.put("RAM 1500", createVehicleRates(baseRates, 2.1)); // RAM 1500 has a slightly lower multiplier than F-150
    rentMap.put("TOYOTA DYNA", createVehicleRates(baseRates, 2.3)); // Toyota Dyna is a larger truck, so higher rate
    rentMap.put("NISSAN NAVARA", createVehicleRates(baseRates, 2.0)); // Nissan Navara has a moderate truck rate
    rentMap.put("SUZUKI RAVI", createVehicleRates(baseRates, 1.8));
    
    
    
    rentMap.put("SEDAN", createVehicleRates(baseRates, 1.0));
    rentMap.put("MINI VAN", createVehicleRates(baseRates, 1.5));
    rentMap.put("SUV", createVehicleRates(baseRates, 1.3));
    rentMap.put("HATCHBACK", createVehicleRates(baseRates, 0.9));
    rentMap.put("TRUCK", createVehicleRates(baseRates, 2.0)); 
 
         // Initialize the class-level variable
        
  

}

// Method to scale base rates by a given multiplier
private HashMap<String, Integer> createVehicleRates(HashMap<String, Integer> baseRates, double multiplier) {
    HashMap<String, Integer> vehicleRates = new HashMap<>();
    for (Map.Entry<String, Integer> entry : baseRates.entrySet()) {
        String location = entry.getKey();
        int rate = (int) (entry.getValue() * multiplier); // Scale base rate by multiplier
        vehicleRates.put(location, rate);
    }
    return vehicleRates;
}


// Method to update the rent amount based on selected locations
private void updateRentAmount() {
   String vehicleType = (String) jComboBox2.getSelectedItem();
    String startingLocation = (String) jComboBox3.getSelectedItem();
    String destinationLocation = (String) jComboBox4.getSelectedItem();

    if (vehicleType != null && startingLocation != null && destinationLocation != null) {
        HashMap<String, Integer> rates = rentMap.get(vehicleType);
        
        if (rates != null) {
            Integer rent = rates.get(destinationLocation);
            if (rent != null) {
                okk.setText(rent + " BDT");
            } else {
                okk.setText("Rent information not available for the selected destination.");
            }
        } else {
            okk.setText("No rates available for the selected vehicle type.");
        }
    } else {
        okk.setText("Please select all required fields.");
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
 /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FIRST.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FIRST.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FIRST.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FIRST.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
              try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }        
  try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FIRST().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ADDRESS;
    private javax.swing.JButton INFORMATION;
    private javax.swing.JButton LOGOUT;
    private javax.swing.JTextField MOBILE;
    private javax.swing.JTextField NAME;
    private javax.swing.JButton NEXT;
    private javax.swing.JTextField NID_NUMBER;
    private javax.swing.JTextField available;
    private javax.swing.JButton button;
    private javax.swing.JTextField car_name;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextArea ok;
    private javax.swing.JTextArea okk;
    private javax.swing.JButton search;
    private javax.swing.JTextField search1;
    private javax.swing.JButton submitt;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
