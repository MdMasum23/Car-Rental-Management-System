/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author DELL
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
public class table1 extends javax.swing.JFrame {
 
    
      // private javax.swing.JScrollPane jScrollPane1;
   // private javax.swing.JTable jTable1;
    /**
     * Creates new form table1
     */
    public table1() {
       initComponents();
        fetchDataFromDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        DELETE = new javax.swing.JButton();
        search1 = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        UPDATE = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NAME", "MOBILE", "ADDRESS", "NID_NUMBER", "PAYMENT", "ADVANCED", "DISCOUNT", "DUE", "car_name", "available"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 752, 138));

        DELETE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        DELETE.setText("DELETE");
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });
        getContentPane().add(DELETE, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, -1, -1));

        search1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        getContentPane().add(search1, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 150, 473, -1));

        search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search.setText("search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 150, -1, -1));

        UPDATE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        UPDATE.setText("UPDATE");
        UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEActionPerformed(evt);
            }
        });
        getContentPane().add(UPDATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, -1, -1));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("PREVIOUS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, -1, -1));

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("PDF");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 220, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wallpaperflare.com_wallpaper (1).jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 770, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
        // TODO add your handling code here:
               int selectedRow = jTable1.getSelectedRow(); // Get selected row
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        // Get the NID number of the selected row to delete
        String nidNumber = jTable1.getValueAt(selectedRow, 3).toString(); // Assuming NID number is at column index 3

        // Database connection variables
        Connection con = null;
        PreparedStatement pst = null;

        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish the connection to the database
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fahim", "root", "12345678");

            // Prepare the delete query
            String query = "DELETE FROM information WHERE nid_number_column = ?";
            pst = con.prepareStatement(query);
            pst.setString(1, nidNumber);

            // Execute the query to delete the data
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
                // Remove the row from the table
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Error: Record not found.");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            // Close resources
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (Exception ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_DELETEActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
     /*     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    jTable1.setRowSorter(sorter);
    String text = search1.getText().trim();
    if (text.isEmpty()) {
        sorter.setRowFilter(null);
    } else {
        try {
            // Create a regex pattern based on the entered text
            Pattern pattern = Pattern.compile("(?i)" + Pattern.quote(text));
            // Apply the filter to the S_NUM column (index 0)
            sorter.setRowFilter(RowFilter.regexFilter(pattern.pattern(), 0));
        } catch (java.util.regex.PatternSyntaxException ex) {
            // Handle invalid regex pattern
            System.out.println("Invalid regex pattern: " + ex.getMessage());
        }
    }  */
      // Get the text entered by the user into the search field
    String text = search1.getText().trim();  // Assuming 'search1' is the JTextField for the search input
    
    // Get the DefaultTableModel and TableRowSorter from the JTable
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    jTable1.setRowSorter(sorter);

    // If the search field is empty, remove the filter (show all rows)
    if (text.isEmpty()) {
        sorter.setRowFilter(null);
    } else {
        try {
            // Create a regex pattern for case-insensitive search
            Pattern pattern = Pattern.compile("(?i)" + Pattern.quote(text));  // (?i) makes it case-insensitive
            
            // Apply the filter to the NID_NUMBER column (index 4 in this example)
            sorter.setRowFilter(RowFilter.regexFilter(pattern.pattern(), 3));  // Assuming NID_NUMBER is the 5th column (index 4)

        } catch (java.util.regex.PatternSyntaxException ex) {
            // Handle invalid regex pattern if needed
            System.out.println("Invalid regex pattern: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_searchActionPerformed

    private void UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEActionPerformed
  // Get the selected row from the JTable
    int selectedRow = jTable1.getSelectedRow();

    // Ensure that a row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update.");
        return;  // Exit the method if no row is selected
    }

    // Get the NID number from the selected row (assuming it's in column 3)
    String nidNumber = jTable1.getValueAt(selectedRow, 3).toString();  // NID column is at index 3

    // Get the updated data from the table (the user may have modified the data directly in the table cells)
    String name = jTable1.getValueAt(selectedRow, 0).toString();
    String mobile = jTable1.getValueAt(selectedRow, 1).toString();
    String address = jTable1.getValueAt(selectedRow, 2).toString();
    String payment = jTable1.getValueAt(selectedRow, 4).toString();
    String advanced = jTable1.getValueAt(selectedRow, 5).toString();
    String discount = jTable1.getValueAt(selectedRow, 6).toString();
    String due = jTable1.getValueAt(selectedRow, 7).toString();
    String carName = jTable1.getValueAt(selectedRow, 8).toString();
    String available = jTable1.getValueAt(selectedRow, 9).toString();

    // Prepare the database connection and SQL queries
    Connection con = null;
    PreparedStatement pst1 = null, pst2 = null;

    try {
        // Load MySQL JDBC driver
        Class.forName("com.mysql.cj.jdbc.Driver");

        // Establish the connection to the 'fahim' database (assuming it's the same database)
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fahim", "root", "12345678");

        // SQL query to update the 'project2' table
        String queryProject2 = "UPDATE project2 SET available = ? WHERE car_name = ?";
        pst1 = con.prepareStatement(queryProject2);
        pst1.setString(1, available); // Set the available field value
        pst1.setString(2, carName);   // Use the carName as the condition for updating
        int rowsUpdatedProject2 = pst1.executeUpdate();
        if (rowsUpdatedProject2 > 0) {
            System.out.println("Record updated in 'project2' table.");
        } else {
            System.out.println("No matching record found in 'project2' table.");
        }

        // SQL query to update the 'hello' table
        String queryHello = "UPDATE hello SET available = ? WHERE car_name = ?";
        pst2 = con.prepareStatement(queryHello);
        pst2.setString(1, available); // Set the available field value
        pst2.setString(2, carName);   // Use the carName as the condition for updating
        int rowsUpdatedHello = pst2.executeUpdate();
        if (rowsUpdatedHello > 0) {
            System.out.println("Record updated in 'hello' table.");
        } else {
            System.out.println("No matching record found in 'hello' table.");
        }

        // SQL query to update the 'information' table (same as before)
        String queryInfo = "UPDATE information SET name_column = ?, mobile_column = ?, address_column = ?, "
                         + "PAYMENT = ?, ADVANCED = ?, DISCOUNT = ?, DUE = ?, car_name = ?, available = ? "
                         + "WHERE nid_number_column = ?";
        PreparedStatement pstInfo = con.prepareStatement(queryInfo);
        pstInfo.setString(1, name);
        pstInfo.setString(2, mobile);
        pstInfo.setString(3, address);
        pstInfo.setString(4, payment);
        pstInfo.setString(5, advanced);
        pstInfo.setString(6, discount);
        pstInfo.setString(7, due);
        pstInfo.setString(8, carName);
        pstInfo.setString(9, available);
        pstInfo.setString(10, nidNumber);  // Update based on NID number

        // Execute the update for 'information' table
        int rowsUpdatedInfo = pstInfo.executeUpdate();
        if (rowsUpdatedInfo > 0) {
            JOptionPane.showMessageDialog(this, "Record in information table updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error: Unable to update the information record.");
        }

        // Update the table row with new data (this ensures the table displays the new values)
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setValueAt(name, selectedRow, 0);
        model.setValueAt(mobile, selectedRow, 1);
        model.setValueAt(address, selectedRow, 2);
        model.setValueAt(payment, selectedRow, 4);
        model.setValueAt(advanced, selectedRow, 5);
        model.setValueAt(discount, selectedRow, 6);
        model.setValueAt(due, selectedRow, 7);
        model.setValueAt(carName, selectedRow, 8);
        model.setValueAt(available, selectedRow, 9);

    } catch (Exception ex) {
        // Show detailed error message
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        ex.printStackTrace();  // Print the stack trace for debugging
    } finally {
        // Close resources
        try {
            if (pst1 != null) pst1.close();
            if (pst2 != null) pst2.close();
            if (con != null) con.close();
        } catch (Exception ex) {
            System.out.println("Error closing resources: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_UPDATEActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      payment paymentPage = new payment();
    
    // Set the payment page as visible
    paymentPage.setVisible(true);
    
    // Optionally, hide the current form
    this.setVisible(false);
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
 
    
    
    
    
    private void fetchDataFromDatabase() {
        // Database connection variables
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        // Define the table model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish the connection to the database
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/fahim", "root", "12345678");

            // Prepare the query to fetch data from the 'information' table
            String query = "SELECT * FROM information";
            pst = con.prepareStatement(query);

            // Execute the query
            rs = pst.executeQuery();

            // Loop through the result set and populate the table
            while (rs.next()) {
                // Add a row to the table for each result
                model.addRow(new Object[]{
                    rs.getString("name_column"),
                    rs.getString("mobile_column"),
                    rs.getString("address_column"),
                    rs.getString("nid_number_column"),
                    rs.getInt("PAYMENT"),
                    rs.getInt("ADVANCED"),
                    rs.getInt("DUE"),
                    rs.getInt("DISCOUNT"),
                    rs.getString("car_name"),
                    rs.getString("available")
                });
            }
        } catch (Exception ex) {
            // Print any exceptions to help with debugging
            System.out.println("Error: " + ex.getMessage());
        } finally {
            // Close resources
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (Exception ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(table1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
   try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new table1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DELETE;
    private javax.swing.JButton UPDATE;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton search;
    private javax.swing.JTextField search1;
    // End of variables declaration//GEN-END:variables
}
